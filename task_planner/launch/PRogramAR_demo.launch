<?xml version="1.0"?>
<launch>
  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find fetch_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="true"/>
  </include>

  <!-- If needed, broadcast static tf for robot root -->
  <!-- Run MTC planner -->
  <node name="task_planner" pkg="task_planner" type="PRogramAR_demo_node" output="screen">
    <param name="execute" value="true" />
    <rosparam command="load" file="$(find task_planner)/config/fetch_config.yaml" />
  </node>

  <node name="scene_handler_node" pkg="scene_handler" type="scene_handler_node" output="screen">
  </node>

  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="/use_gui" value="true"/>
    <rosparam param="/source_list">[/move_group/fake_controller_joint_states]</rosparam>
  </node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <arg name="pipeline" default="$(optenv PLANNING_PIPELINE ompl)" />
  <include file="$(find fetch_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>  
    <arg name="fake_execution" value="true"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="pipeline" value="$(arg pipeline)" />
  </include>

  <!-- If database loading was enabled, start mongodb as well -->
  <include file="$(find fetch_moveit_config)/launch/default_warehouse_db.launch" if="$(arg db)"/>
  <param name="move_group/capabilities" value="move_group/ExecuteTaskSolutionCapability" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

  <arg name="rviz_config" default="$(find task_planner)/config/fetch_mtc.rviz" />
  <arg     if="$(eval rviz_config=='')" name="command_args" value="" />
  <arg unless="$(eval rviz_config=='')" name="command_args" value="-d $(arg rviz_config)" />

  <node name="$(anon rviz)" launch-prefix="$(arg launch_prefix)" pkg="rviz" type="rviz" respawn="false"
  args="$(arg command_args)" output="screen">
    <rosparam command="load" file="$(find fetch_moveit_config)/config/kinematics.yaml"/>
  </node>

  <node name="ready_pose" pkg="task_planner" type="ready_pose.py" output="screen">
  </node>

    <arg name="tcp_ip" default="127.0.0.1"/>
    <arg name="tcp_port" default="10000"/>
    <node name="unity_endpoint" pkg="ros_tcp_endpoint" type="default_server_endpoint.py" output="screen">
        <param name="tcp_ip" type="string" value="$(arg tcp_ip)"/>
        <param name="tcp_port" type="int" value="$(arg tcp_port)"/>
    </node>
</launch>
